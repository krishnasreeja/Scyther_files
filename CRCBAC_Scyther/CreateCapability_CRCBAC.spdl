hashfunction H;/* Secure hash function */
secret XOR:Function;/* XOR operation */
const Concat: Function;/*Concatenation Function */
const Fresh: Function;
const Getchild:Function;
const Getrole:Function;
const GetPermission:Function;
const Create:Function;
const Update:Function;
const Rg1,c'; 
const cxt,IDa,IDb; 
secret SKa,SKb,resp;
protocol CreateCapability (RoleA,RoleB, RoleC  )
{
	macro Ea=Concat(IDa,resp);
	macro Eb= Update(c',resp);
	macro R1=Getchild(Rg1);
	
    role RoleA  {
        fresh T1:Nonce;      var T4:Nonce;
       	macro Ma = XOR(Concat(IDa,c',cxt),H(SKa));
        send_1 (RoleA,RoleB,Ma);
	recv_4(RoleB,RoleA,Eb,T4);
        claim(RoleA,Alive);claim(RoleA,Nisynch);
        claim(RoleA,Weakagree);claim(RoleA,Niagree);
        claim(RoleA,Commit,RoleB,resp);
        claim(RoleA,Secret,SKa); }
    role RoleB   {    
        fresh T2,T4 :Nonce;     var T1, T3: Nonce;
        recv_1(RoleA,RoleB,Ma);
	macro Mb=XOR(Concat(IDb,cxt,T2),H(SKb));
        send_2 (RoleB, RoleC  ,Ma,Mb);
        recv_3( RoleC  ,RoleB,Ea,Eb,T3);
	send_4(RoleB,RoleA,Eb,T4);
	claim(RoleB,Alive);
        claim(RoleB,Weakagree);
        claim(RoleB,Niagree);
        claim(RoleB,Nisynch);
	claim(RoleB,Commit, RoleC  ,resp);
        claim(RoleB,Secret,SKb);   }
   role RoleC  {
        fresh T3:Nonce;
        var T2:Nonce;var Ma,Mb;
        recv_2 (RoleB, RoleC  ,Ma,Mb);
	macro Ma'=XOR(Ma,H(SKa));
	match(XOR(Ma',H(SKa)),Ma);
	macro Mb'=XOR(Mb,H(SKb));
	match(XOR(Mb',H(SKb)),Mb);
	macro Rol= Getrole(IDa,cxt);
	macro Per=GetPermission(Rol);
	macro cre= Create(Rg1,c');
	macro GetPermission= allow;
	macro resp=cre(GetPermission)	;
	send_3( RoleC ,RoleB,Ea,Eb,T3);
	claim( RoleC  ,Alive);  claim( RoleC  ,Niagree);
        claim( RoleC  ,Weakagree);claim( RoleC  ,Secret,SKb);
       claim( RoleC  ,Nisynch);claim( RoleC  ,Secret,SKa);    }
}


